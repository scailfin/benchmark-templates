# This file is part of the Reproducible Open Benchmarks for Data Analysis
# Platform (ROB).
#
# Copyright (C) 2019 NYU.
#
# ROB is free software; you can redistribute it and/or modify it under the
# terms of the MIT License; see LICENSE file for more details.

"""Base classes and interfaces for benchmark repositories. All classes extend
the respective classes for the template repository.
"""

from abc import abstractmethod

from robtmpl.template.repo.base import TemplateRepository


# -- Benchmark Repository ------------------------------------------------------

class BenchmarkRepository(TemplateRepository):
    """The benchmark repository extends a template repository with functionality
    to create submissions and leaderboard information.
    """
    @abstractmethod
    def create_submission(self, benchmark_id, name):
        """Create a new submission entry for a given benchmark. Each submission
        for a benchmark is expected to have a unique name. The maximal name
        length is currently 255 character.

        At creation time, each submission is assigned a unique identifier.

        Parameters
        ----------
        benchmark_id: string
            Unique benchmark (template) identifier
        name: string
            Submission name that is unique for the template

        Returns
        -------
        robtmpl.benchmark.base.Submission

        Raises
        ------
        robtmpl.core.error.ROBError
        """
        raise NotImplementedError()

    @abstractmethod
    def get_leaderboard(self, benchmark_id, sort_key=None, all_entries=False):
        """Get the current leaderboard for the given benchmark. The result is a
        list of benchmark results.

        If the all_entries flag is False at most one result per user is added
        to the result.

        Parameters
        ----------
        benchmark_id: string
            Unique benchmark (template) identifier
        sort_key: string, optional
            Use the given attribute to sort run results. If not given the schema
            default attribute is used
        all_entries: bool, optional
            Include at most one entry per user in the result if False

        Returns
        -------
        list(robtmpl.benchmark.repo.base.BenchmarkResult)
        """
        raise NotImplementedError()

    @abstractmethod
    def get_submissions(self, submission_id):
        """Get the handle for the submission with the given identifier.

        Parameters
        ----------
        submission_id: string
            Unique submission identifier

        Returns
        -------
        robtmpl.benchmark.base.SubmissionHandle
        """
        raise NotImplementedError()

    @abstractmethod
    def insert_results(self, run_id, result):
        """Insert the results of a benchmark run into the leaderboard table.
        Expects a dictionary that contains result values for all mandatory
        attributes in the result schema.

        The repository is expected to maintain a reference from the unique run
        identifier to the associated submission and template.

        Parameters
        ----------
        run_id: string
            Unique run identifier
        result: dict
                Dictionary containing run result values

        Raises
        ------
        robtmpl.core.error.ROBError
        """
        raise NotImplementedError()

    @abstractmethod
    def list_submissions(self, benchmark_id):
        """Get a list of all submissions for a given benchmark.

        Parameters
        ----------
        benchmark_id: string
            Unique benchmark (template) identifier

        Returns
        -------
        list(robtmpl.benchmark.base.SubmissionHandle)
        """
        raise NotImplementedError()


# -- Leaderboard ---------------------------------------------------------------

class BenchmarkResult(object):
    """Entry in the leaderboard for a benchmark. The benchmark result contains
    the name of the user/team that submitted the run and the name of the
    submission itself. The result also contains a dictionary with values for
    all attributes in the result schema.
    """
    def __init__(self, user_name, submission_name, run_id, result):
        """Initialize the components of the leaderboard entry.

        Parameters
        ----------
        user_name: string
            Name of the user/team that submitted the benchmark run
        submission_name: string
            Name of the submission
        run_id: string
            Unique identifier of the run that generated the result
        result: dict
            Dictionary of result values for all attributes in the result schema.
            Attributes for which no value was generated by the run have None as
            their value.
        """
        self.user_name = user_name
        self.submission_name = submission_name
        self.result = result

    def has_value(self, key):
        """Shortcut to test whether the attribute with the given name has a
        value that is not None.

        Parameters
        ----------
        key: string
            Unique column identifier in the result schema

        Returns
        -------
        bool
        """
        return not self.result[key] is None

    def get_value(self, key):
        """Shortcut to get value for the attribute with the given name.

        Parameters
        ----------
        key: string
            Unique column identifier in the result schema

        Returns
        -------
        scalar
        """
        return self.result[key]


# -- Submissions ---------------------------------------------------------------

class SubmissionHandle(object):
    """Handle providing access to information for a benchmark submission."""
    def __init__(self, identifier, name, template):
        """Initialize the object properties.

        Parameters
        ----------
        identifier: string
            Unique submission identifier
        name: string
            Unique submission name
        template: robtmpl.template.repo.TemplateHandle
            Handle for the benchmark template in the repository
        """
        self.identifier = identifier
        self.name = name
        self.template = template
